name: üöÄ Auto Version and Release

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'

env:
  NODE_VERSION: '18'

permissions:
  contents: write
  actions: write

jobs:
  auto-version-and-release:
    name: üöÄ Auto Version and Release
    runs-on: macos-14
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–º–º–∏—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç [skip-version]
    if: "!contains(github.event.head_commit.message, '[skip-version]')"
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: üñ•Ô∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üîç Analyze commit for version bump type
        id: version_type
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          echo "Analyzing commit: $COMMIT_MSG"
          
          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –∫–æ–º–º–∏—Ç—É
          if echo "$COMMIT_MSG" | grep -qE "(BREAKING|üí•|breaking)"; then
            VERSION_TYPE="major"
            echo "üî• BREAKING CHANGE detected - major version bump"
          elif echo "$COMMIT_MSG" | grep -qE "(feat|‚ú®|feature|add)"; then
            VERSION_TYPE="minor"
            echo "‚ú® Feature detected - minor version bump"
          elif echo "$COMMIT_MSG" | grep -qE "(fix|üêõ|bug|patch)"; then
            VERSION_TYPE="patch"
            echo "üêõ Fix detected - patch version bump"
          else
            echo "üìù No version keywords found - skipping release"
            exit 0
          fi
          
          echo "VERSION_TYPE=$VERSION_TYPE" >> $GITHUB_OUTPUT

      - name: üì¶ Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(grep '"version"' package.json | sed 's/.*"version": "\(.*\)".*/\1/')
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "üìã Current version: $CURRENT_VERSION"

      - name: üî¢ Calculate new version
        id: new_version
        run: |
          CURRENT="${{ steps.current_version.outputs.CURRENT_VERSION }}"
          TYPE="${{ steps.version_type.outputs.VERSION_TYPE }}"
          
          # –†–∞–∑–±–∏—Ä–∞–µ–º –≤–µ—Ä—Å–∏—é –Ω–∞ —á–∞—Å—Ç–∏
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
          case $TYPE in
            "major")
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            "minor")
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
              ;;
            "patch")
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
          esac
          
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "TAG_NAME=v$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ New version: $CURRENT ‚Üí $NEW_VERSION"

      - name: ‚úèÔ∏è Update package.json
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.NEW_VERSION }}"
          CURRENT_VERSION="${{ steps.current_version.outputs.CURRENT_VERSION }}"
          
          # –û–±–Ω–æ–≤–ª—è–µ–º package.json –∏—Å–ø–æ–ª—å–∑—É—è –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–±
          sed -i '' "s/\"version\": \"$CURRENT_VERSION\"/\"version\": \"$NEW_VERSION\"/" package.json
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
          UPDATED_VERSION=$(grep '"version"' package.json | sed 's/.*"version": "\(.*\)".*/\1/')
          if [ "$UPDATED_VERSION" = "$NEW_VERSION" ]; then
            echo "‚úÖ Updated package.json: $CURRENT_VERSION ‚Üí $NEW_VERSION"
          else
            echo "‚ùå Failed to update package.json. Current: $UPDATED_VERSION, Expected: $NEW_VERSION"
            exit 1
          fi

      - name: üìö Update CHANGELOG.md
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.NEW_VERSION }}"
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          DATE=$(date +"%Y-%m-%d")
          
          # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è CHANGELOG
          if [ -f "CHANGELOG.md" ]; then
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å—å—é
            echo "" > /tmp/changelog_entry
            echo "## [$NEW_VERSION] - $DATE" >> /tmp/changelog_entry
            echo "" >> /tmp/changelog_entry
            echo "### ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ" >> /tmp/changelog_entry
            echo "- $COMMIT_MSG" >> /tmp/changelog_entry
            echo "" >> /tmp/changelog_entry
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ CHANGELOG.md
            awk '
            /^## \[/ && !inserted {
                while ((getline line < "/tmp/changelog_entry") > 0) {
                    print line
                }
                close("/tmp/changelog_entry")
                inserted = 1
            }
            {print}
            ' CHANGELOG.md > /tmp/changelog_new
            mv /tmp/changelog_new CHANGELOG.md
            
            echo "‚úÖ Updated CHANGELOG.md"
          else
            echo "‚ö†Ô∏è CHANGELOG.md not found, skipping"
          fi

      - name: üîç Verify package.json version
        run: |
          echo "üîç Verifying package.json version..."
          if [ ! -f "package.json" ]; then
            echo "‚ùå package.json not found"
            exit 1
          fi

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ—Ä—Å–∏—è —É–∫–∞–∑–∞–Ω–∞
          VERSION=$(grep '"version"' package.json | sed 's/.*"version": "\(.*\)".*/\1/' | tr -d '"' | tr -d ',')
          if [ -z "$VERSION" ]; then
            echo "‚ùå Version field is empty or not found in package.json"
            echo "üìÑ Current package.json content:"
            cat package.json
            exit 1
          fi

          echo "‚úÖ Version found: $VERSION"

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏ (semver)
          if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "‚ùå Version format is invalid. Expected: x.y.z, Got: $VERSION"
            exit 1
          fi

          echo "‚úÖ Version format is valid"

      - name: üì¶ Install dependencies
        run: |
          echo "üì¶ Installing dependencies..."
          npm install

      - name: ‚öõÔ∏è Build React application
        run: |
          echo "‚öõÔ∏è Building React application..."
          npx vite build --outDir build/dist

      - name: üî® Build Electron main process
        run: |
          echo "üî® Compiling TypeScript for Electron..."
          # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å React build
          mkdir -p build/electron
          npx tsc -p tsconfig.electron.json
          echo "üìÅ Checking compiled files..."
          ls -la build/electron/ || echo "build/electron/ folder not found"
          
          # –ö–æ–ø–∏—Ä—É–µ–º —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ build/dist
          if [ -f "build/electron/main.js" ]; then
            echo "‚úÖ main.js found at build/electron/main.js"
            cp build/electron/main.js build/dist/main.js
          else
            echo "‚ùå main.js not found, checking structure:"
            find build/electron -name "*.js" -type f
            exit 1
          fi
          
          if [ -f "build/electron/preload.js" ]; then
            echo "‚úÖ preload.js found at build/electron/preload.js"
            cp build/electron/preload.js build/dist/preload.js
          else
            echo "‚ùå preload.js not found, checking structure:"
            find build/electron -name "*.js" -type f
            exit 1
          fi

      - name: üìÅ Prepare files for electron-builder
        run: |
          echo "üìÅ Preparing files for electron-builder..."
          cp -r build/dist ./dist
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ
          if [ ! -f "dist/main.js" ]; then
            echo "‚ùå main.js not found"
            exit 1
          fi
          if [ ! -f "dist/preload.js" ]; then
            echo "‚ùå preload.js not found"
            exit 1
          fi
          if [ ! -f "dist/index.html" ]; then
            echo "‚ùå index.html not found"
            exit 1
          fi
          echo "‚úÖ All required files present"

      - name: üèóÔ∏è Build macOS applications
        run: |
          echo "üèóÔ∏è Building macOS applications with electron-builder..."
          npx electron-builder --mac --publish never
        env:
          # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è CI
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: üìä Verify build artifacts
        run: |
          echo "üìä Checking build artifacts..."
          if [ -d "build/release" ]; then
            echo "‚úÖ build/release/ found"
            ls -la build/release/
          else
            echo "‚ùå build/release/ not found"
            echo "üìÅ Checking all build directories:"
            find . -name "*.dmg" -o -name "*.zip" 2>/dev/null || echo "No DMG/ZIP files found anywhere"
            exit 1
          fi
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
          echo "üîç Looking for DMG and ZIP files..."
          DMG_COUNT=0
          for file in build/release/*.dmg build/release/*.zip; do
            if [ -f "$file" ]; then
              size=$(du -h "$file" | cut -f1)
              echo "üì¶ $(basename "$file"): $size"
              DMG_COUNT=$((DMG_COUNT + 1))
            fi
          done
          
          if [ $DMG_COUNT -eq 0 ]; then
            echo "‚ùå No DMG or ZIP files found for release!"
            echo "üìÅ Contents of build/release/:"
            ls -la build/release/
            exit 1
          else
            echo "‚úÖ Found $DMG_COUNT release files"
          fi

      - name: üè∑Ô∏è Create and push tag
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.NEW_VERSION }}"
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          
          # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
          git add package.json CHANGELOG.md
          git commit -m "ü§ñ chore(release): bump version to $NEW_VERSION [skip-version]"
          
          # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          
          # –ü—É—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Ç–µ–≥
          git push origin main
          git push origin "v$NEW_VERSION"
          
          echo "‚úÖ Created and pushed tag v$NEW_VERSION"

      - name: üìù Generate release notes
        id: release_notes
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.NEW_VERSION }}"
          echo "üìù Generating release notes..."
          
          # –°–æ–∑–¥–∞–µ–º release notes –∏–∑ CHANGELOG.md –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          if [ -f "CHANGELOG.md" ]; then
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ–∫—Ü–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
            RELEASE_NOTES=$(awk "
              /^## \[$NEW_VERSION\]/ { found=1; next }
              /^## \[/ && found { exit }
              found && /^### / { 
                gsub(/^### /, \"**\")
                gsub(/$/, \"**\")
                print
                next
              }
              found && /^- / { print }
              found && /^$/ { print }
            " CHANGELOG.md)
          fi
          
          # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ CHANGELOG, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
          if [ -z "$RELEASE_NOTES" ]; then
            echo "## MacPortScanner v$NEW_VERSION" > release_notes.md
            echo "" >> release_notes.md
            echo "üöÄ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∫–∞–Ω–µ—Ä –ø–æ—Ä—Ç–æ–≤ –¥–ª—è macOS —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è Apple Silicon" >> release_notes.md
            echo "" >> release_notes.md
            echo "### üì¶ –§–∞–π–ª—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è" >> release_notes.md
            echo "" >> release_notes.md
            echo "- **MacPortScanner-$NEW_VERSION-arm64.dmg** - –î–ª—è Apple Silicon (M1/M2/M3)" >> release_notes.md
            echo "- **MacPortScanner-$NEW_VERSION.dmg** - –î–ª—è Intel Mac" >> release_notes.md
            echo "- **ZIP –∞—Ä—Ö–∏–≤—ã** - –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏" >> release_notes.md
            echo "" >> release_notes.md
            echo "### üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è" >> release_notes.md
            echo "" >> release_notes.md
            echo "- macOS 10.15 (Catalina) –∏–ª–∏ –Ω–æ–≤–µ–µ" >> release_notes.md
            echo "- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: Apple Silicon –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏" >> release_notes.md
            echo "" >> release_notes.md
            echo "### ‚ö†Ô∏è –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫" >> release_notes.md
            echo "" >> release_notes.md
            echo "–ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ macOS –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏." >> release_notes.md
            echo "**–†–µ—à–µ–Ω–∏–µ:** –©–µ–ª–∫–Ω–∏—Ç–µ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é ‚Üí \"–û—Ç–∫—Ä—ã—Ç—å\" ‚Üí \"–û—Ç–∫—Ä—ã—Ç—å\"" >> release_notes.md
          else
            echo "$RELEASE_NOTES" > release_notes.md
          fi
          
          echo "‚úÖ Release notes generated"

      - name: üöÄ Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.new_version.outputs.TAG_NAME }}
          name: MacPortScanner ${{ steps.new_version.outputs.TAG_NAME }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            build/release/*.dmg
            build/release/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üéâ Summary
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.NEW_VERSION }}"
          echo "üéâ Version automatically bumped to $NEW_VERSION"
          echo "üè∑Ô∏è Tag v$NEW_VERSION created and pushed"
          echo "üì¶ DMG and ZIP files built and uploaded"
          echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/v$NEW_VERSION"