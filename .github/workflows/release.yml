name: 🚀 Build and Release MacPortScanner

on:
  push:
    tags:
      - 'v*.*.*'  # Триггер на теги версий (v1.0.0, v1.2.3, etc.)

env:
  NODE_VERSION: '18'

jobs:
  build-and-release:
    name: 🔨 Build and Release
    runs-on: macos-14
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Полная история для changelog

      - name: 🏷️ Get version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "📦 Building version: $VERSION"

      - name: 🖥️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          echo "📦 Installing dependencies..."
          npm install

      - name: 🔍 Verify package.json version
        run: |
          PACKAGE_VERSION=$(grep '"version"' package.json | sed 's/.*"version": "\(.*\)".*/\1/')
          if [ "$PACKAGE_VERSION" != "${{ steps.version.outputs.VERSION }}" ]; then
            echo "❌ Version mismatch: package.json has $PACKAGE_VERSION, tag is ${{ steps.version.outputs.VERSION }}"
            exit 1
          fi
          echo "✅ Version verified: $PACKAGE_VERSION"

      - name: 🔨 Build Electron main process
        run: |
          echo "🔨 Compiling TypeScript for Electron..."
          mkdir -p build/dist
          # Компилируем напрямую в build/dist
          npx tsc src/main.ts --outDir build/dist --target ES2020 --module CommonJS --esModuleInterop --skipLibCheck --types node,electron
          npx tsc src/preload.ts --outDir build/dist --target ES2020 --module CommonJS --esModuleInterop --skipLibCheck --types node,electron
          echo "📁 Checking compiled files..."
          ls -la build/dist/ || echo "build/dist/ folder not found"

      - name: ⚛️ Build React application
        run: |
          echo "⚛️ Building React application..."
          npx vite build --outDir build/dist

      - name: 📁 Prepare files for electron-builder
        run: |
          echo "📁 Preparing files for electron-builder..."
          cp -r build/dist ./dist
          
          # Проверяем что все файлы на месте
          if [ ! -f "dist/main.js" ]; then
            echo "❌ main.js not found"
            exit 1
          fi
          if [ ! -f "dist/preload.js" ]; then
            echo "❌ preload.js not found"
            exit 1
          fi
          if [ ! -f "dist/index.html" ]; then
            echo "❌ index.html not found"
            exit 1
          fi
          echo "✅ All required files present"

      - name: 🏗️ Build macOS applications
        run: |
          echo "🏗️ Building macOS applications with electron-builder..."
          npx electron-builder --mac --publish never
        env:
          # Отключаем подписание для CI
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: 📊 Verify build artifacts
        run: |
          echo "📊 Checking build artifacts..."
          ls -la build/release/
          
          # Проверяем размеры файлов
          for file in build/release/*.dmg build/release/*.zip; do
            if [ -f "$file" ]; then
              size=$(du -h "$file" | cut -f1)
              echo "📦 $(basename "$file"): $size"
            fi
          done

      - name: 📝 Generate release notes
        id: release_notes
        run: |
          echo "📝 Generating release notes..."
          
          # Создаем release notes из CHANGELOG.md если он существует
          if [ -f "CHANGELOG.md" ]; then
            # Извлекаем секцию для текущей версии
            RELEASE_NOTES=$(awk "
              /^## \[${{ steps.version.outputs.VERSION }}\]/ { found=1; next }
              /^## \[/ && found { exit }
              found && /^### / { 
                gsub(/^### /, \"**\")
                gsub(/$/, \"**\")
                print
                next
              }
              found && /^- / { print }
              found && /^$/ { print }
            " CHANGELOG.md)
          fi
          
          # Если не нашли в CHANGELOG, создаем базовое описание
          if [ -z "$RELEASE_NOTES" ]; then
            echo "## MacPortScanner ${{ steps.version.outputs.TAG_NAME }}" > release_notes.md
            echo "" >> release_notes.md
            echo "🚀 Профессиональный сканер портов для macOS с оптимизацией для Apple Silicon" >> release_notes.md
            echo "" >> release_notes.md
            echo "### 📦 Файлы для скачивания" >> release_notes.md
            echo "" >> release_notes.md
            echo "- **MacPortScanner-${{ steps.version.outputs.VERSION }}-arm64.dmg** - Для Apple Silicon (M1/M2/M3)" >> release_notes.md
            echo "- **MacPortScanner-${{ steps.version.outputs.VERSION }}.dmg** - Для Intel Mac" >> release_notes.md
            echo "- **ZIP архивы** - Альтернативный формат установки" >> release_notes.md
            echo "" >> release_notes.md
            echo "### 🔧 Системные требования" >> release_notes.md
            echo "" >> release_notes.md
            echo "- macOS 10.15 (Catalina) или новее" >> release_notes.md
            echo "- Рекомендуется: Apple Silicon для максимальной производительности" >> release_notes.md
          else
            echo "$RELEASE_NOTES" > release_notes.md
          fi
          
          echo "✅ Release notes generated"

      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.TAG_NAME }}
          name: MacPortScanner ${{ steps.version.outputs.TAG_NAME }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            build/release/MacPortScanner-${{ steps.version.outputs.VERSION }}-arm64.dmg
            build/release/MacPortScanner-${{ steps.version.outputs.VERSION }}.dmg
            build/release/MacPortScanner-${{ steps.version.outputs.VERSION }}-arm64-mac.zip
            build/release/MacPortScanner-${{ steps.version.outputs.VERSION }}-mac.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Release Summary
        run: |
          echo "🎉 Release ${{ steps.version.outputs.TAG_NAME }} created successfully!"
          echo ""
          echo "📦 Uploaded files:"
          for file in build/release/*.dmg build/release/*.zip; do
            if [ -f "$file" ]; then
              size=$(du -h "$file" | cut -f1)
              echo "  ✅ $(basename "$file") ($size)"
            fi
          done
          echo ""
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.TAG_NAME }}"

  # Дополнительная job для уведомлений (опционально)
  notify:
    name: 📢 Notify Release
    runs-on: ubuntu-latest
    needs: build-and-release
    if: success()
    
    steps:
      - name: 🎉 Success Notification
        run: |
          echo "🎉 MacPortScanner ${{ needs.build-and-release.outputs.TAG_NAME || github.ref_name }} released successfully!"
          echo "📦 DMG and ZIP files uploaded to GitHub Releases"
          echo "🔗 https://github.com/${{ github.repository }}/releases"