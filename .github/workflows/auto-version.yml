name: üì¶ Auto Version Bump

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
      - '.github/**'

env:
  NODE_VERSION: '18'

jobs:
  auto-version:
    name: üì¶ Auto Version Bump
    runs-on: ubuntu-latest
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–º–º–∏—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç [skip-version]
    if: "!contains(github.event.head_commit.message, '[skip-version]')"
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: üñ•Ô∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üîç Analyze commit for version bump type
        id: version_type
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          echo "Analyzing commit: $COMMIT_MSG"
          
          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –∫–æ–º–º–∏—Ç—É
          if echo "$COMMIT_MSG" | grep -qE "(BREAKING|üí•|breaking)"; then
            VERSION_TYPE="major"
            echo "üî• BREAKING CHANGE detected - major version bump"
          elif echo "$COMMIT_MSG" | grep -qE "(feat|‚ú®|feature|add)"; then
            VERSION_TYPE="minor"
            echo "‚ú® Feature detected - minor version bump"
          elif echo "$COMMIT_MSG" | grep -qE "(fix|üêõ|bug|patch)"; then
            VERSION_TYPE="patch"
            echo "üêõ Fix detected - patch version bump"
          else
            VERSION_TYPE="patch"
            echo "üìù Default - patch version bump"
          fi
          
          echo "VERSION_TYPE=$VERSION_TYPE" >> $GITHUB_OUTPUT

      - name: üì¶ Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(grep '"version"' package.json | sed 's/.*"version": "\(.*\)".*/\1/')
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "üìã Current version: $CURRENT_VERSION"

      - name: üî¢ Calculate new version
        id: new_version
        run: |
          CURRENT="${{ steps.current_version.outputs.CURRENT_VERSION }}"
          TYPE="${{ steps.version_type.outputs.VERSION_TYPE }}"
          
          # –†–∞–∑–±–∏—Ä–∞–µ–º –≤–µ—Ä—Å–∏—é –Ω–∞ —á–∞—Å—Ç–∏
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
          case $TYPE in
            "major")
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            "minor")
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
              ;;
            "patch")
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
          esac
          
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ New version: $CURRENT ‚Üí $NEW_VERSION"

      - name: ‚úèÔ∏è Update package.json
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.NEW_VERSION }}"
          CURRENT_VERSION="${{ steps.current_version.outputs.CURRENT_VERSION }}"
          
          # –û–±–Ω–æ–≤–ª—è–µ–º package.json
          sed -i "s/\"version\": \"$CURRENT_VERSION\"/\"version\": \"$NEW_VERSION\"/" package.json
          
          echo "‚úÖ Updated package.json: $CURRENT_VERSION ‚Üí $NEW_VERSION"

      - name: üìö Update CHANGELOG.md
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.NEW_VERSION }}"
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          DATE=$(date +"%Y-%m-%d")
          
          # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è CHANGELOG
          if [ -f "CHANGELOG.md" ]; then
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å—å—é
            echo "" > /tmp/changelog_entry
            echo "## [$NEW_VERSION] - $DATE" >> /tmp/changelog_entry
            echo "" >> /tmp/changelog_entry
            echo "### ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ" >> /tmp/changelog_entry
            echo "- $COMMIT_MSG" >> /tmp/changelog_entry
            echo "" >> /tmp/changelog_entry
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ CHANGELOG.md
            awk '
            /^## \[/ && !inserted {
                while ((getline line < "/tmp/changelog_entry") > 0) {
                    print line
                }
                close("/tmp/changelog_entry")
                inserted = 1
            }
            {print}
            ' CHANGELOG.md > /tmp/changelog_new
            mv /tmp/changelog_new CHANGELOG.md
            
            echo "‚úÖ Updated CHANGELOG.md"
          else
            echo "‚ö†Ô∏è CHANGELOG.md not found, skipping"
          fi

      - name: üè∑Ô∏è Create and push tag
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.NEW_VERSION }}"
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          
          # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
          git add package.json CHANGELOG.md
          git commit -m "ü§ñ chore(release): bump version to $NEW_VERSION [skip-version]"
          
          # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          
          # –ü—É—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Ç–µ–≥
          git push origin main
          git push origin "v$NEW_VERSION"
          
          echo "‚úÖ Created and pushed tag v$NEW_VERSION"

      - name: üéâ Summary
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.NEW_VERSION }}"
          echo "üéâ Version automatically bumped to $NEW_VERSION"
          echo "üè∑Ô∏è Tag v$NEW_VERSION created and pushed"
          echo "üöÄ Release workflow will be triggered automatically"
          echo "üîó Watch releases: https://github.com/${{ github.repository }}/releases"