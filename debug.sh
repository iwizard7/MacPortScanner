#!/bin/bash

# MacPortScanner Advanced Debug & Logging System
# –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –æ—Ç–ª–∞–¥–∫–∏

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m'

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_debug() {
    echo -e "${CYAN}[DEBUG]${NC} $1" | tee -a debug.log
}

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1" | tee -a debug.log
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1" | tee -a debug.log
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" | tee -a debug.log
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1" | tee -a debug.log
}

log_header() {
    echo -e "${PURPLE}[HEADER]${NC} $1" | tee -a debug.log
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
init_logging() {
    local timestamp=$(date '+%Y-%m-%d_%H-%M-%S')
    local log_file="debug_${timestamp}.log"
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
    mkdir -p logs
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª
    exec 1> >(tee -a "logs/$log_file")
    exec 2> >(tee -a "logs/$log_file" >&2)
    
    log_header "MacPortScanner Debug Session Started: $(date)"
    log_info "Log file: logs/$log_file"
    echo "debug.log" > .current_debug_log
}

# –°–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
system_diagnostics() {
    log_header "=== –°–ò–°–¢–ï–ú–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ==="
    
    log_info "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:"
    sw_vers | while read line; do log_debug "  $line"; done
    
    log_info "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:"
    log_debug "  $(uname -m)"
    
    log_info "–î–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞–º—è—Ç—å:"
    log_debug "  $(vm_stat | head -5)"
    
    log_info "–í–µ—Ä—Å–∏—è Xcode:"
    if command -v xcodebuild &> /dev/null; then
        log_debug "  $(xcodebuild -version | head -1)"
    else
        log_warn "  Xcode –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    log_info "–í–µ—Ä—Å–∏—è Rust:"
    if command -v rustc &> /dev/null; then
        log_debug "  $(rustc --version)"
        log_debug "  $(cargo --version)"
    else
        log_warn "  Rust –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    log_info "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (PATH):"
    echo "$PATH" | tr ':' '\n' | while read path; do
        log_debug "  $path"
    done
}

# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
project_diagnostics() {
    log_header "=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ï–ö–¢–ê ==="
    
    log_info "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:"
    find . -type f -name "*.rs" -o -name "*.swift" -o -name "*.toml" -o -name "*.sh" -o -name "*.app" | head -20 | while read file; do
        log_debug "  $file"
    done
    
    log_info "Cargo.toml —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:"
    if [ -f "Core/Cargo.toml" ]; then
        cat Core/Cargo.toml | while read line; do
            log_debug "  $line"
        done
    else
        log_error "  Core/Cargo.toml –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    fi
    
    log_info "–†–∞–∑–º–µ—Ä—ã –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:"
    for file in "Core/target/release/libmacportscan_core.dylib" "Core/target/release/libmacportscan_core.a"; do
        if [ -f "$file" ]; then
            log_debug "  $file: $(ls -lh "$file" | awk '{print $5}')"
        else
            log_warn "  $file: –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
    done
}

# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app_diagnostics() {
    log_header "=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ==="
    
    local app_path="dist/MacPortScanner.app"
    
    if [ ! -d "$app_path" ]; then
        log_error "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: $app_path"
        return 1
    fi
    
    log_info "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:"
    find "$app_path" -type f | while read file; do
        log_debug "  $file ($(ls -lh "$file" | awk '{print $5}'))"
    done
    
    log_info "–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:"
    ls -la "$app_path" | while read line; do
        log_debug "  $line"
    done
    
    log_info "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ Info.plist:"
    local plist_path="$app_path/Contents/Info.plist"
    if [ -f "$plist_path" ]; then
        cat "$plist_path" | while read line; do
            log_debug "  $line"
        done
    else
        log_warn "  Info.plist –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    log_info "–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª:"
    local exec_path="$app_path/Contents/MacOS/MacPortScanner"
    if [ -f "$exec_path" ]; then
        log_debug "  –†–∞–∑–º–µ—Ä: $(ls -lh "$exec_path" | awk '{print $5}')"
        log_debug "  –ü—Ä–∞–≤–∞: $(ls -l "$exec_path" | awk '{print $1}')"
        log_debug "  –¢–∏–ø —Ñ–∞–π–ª–∞: $(file "$exec_path")"
        
        log_info "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞:"
        head -10 "$exec_path" | while read line; do
            log_debug "  $line"
        done
    else
        log_error "  –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $exec_path"
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
test_execution() {
    log_header "=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ü–£–°–ö–ê ==="
    
    local app_path="dist/MacPortScanner.app"
    local exec_path="$app_path/Contents/MacOS/MacPortScanner"
    
    if [ ! -f "$exec_path" ]; then
        log_error "–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    log_info "–¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞"
    if timeout 10s "$exec_path" 2>&1; then
        log_success "–ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–µ–Ω"
    else
        local exit_code=$?
        log_error "–ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ –Ω–µ—É–¥–∞—á–µ–Ω (–∫–æ–¥: $exit_code)"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:"
        if command -v otool &> /dev/null; then
            otool -L "$exec_path" 2>&1 | while read line; do
                log_debug "  $line"
            done
        fi
    fi
    
    log_info "–¢–µ—Å—Ç 2: –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ open"
    if timeout 10s open "$app_path" 2>&1; then
        log_success "–ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ open —É—Å–ø–µ—à–µ–Ω"
    else
        local exit_code=$?
        log_error "–ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ open –Ω–µ—É–¥–∞—á–µ–Ω (–∫–æ–¥: $exit_code)"
    fi
    
    log_info "–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤"
    log_debug "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ Console.app:"
    log show --predicate 'process == "MacPortScanner"' --last 1m 2>/dev/null | tail -10 | while read line; do
        log_debug "  $line"
    done
}

# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–±–æ—Ä–∫–∏
build_diagnostics() {
    log_header "=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ë–û–†–ö–ò ==="
    
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Rust —Å–±–æ—Ä–∫–∏:"
    cd Core
    if cargo check --release 2>&1; then
        log_success "Rust –∫–æ–¥ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫"
    else
        log_error "–û—à–∏–±–∫–∏ –≤ Rust –∫–æ–¥–µ"
    fi
    
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Rust –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:"
    if cargo test --release 2>&1; then
        log_success "Rust —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏"
    else
        log_warn "Rust —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
    fi
    
    cd ..
    
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω–∫–æ–≤–∫–∏:"
    local lib_path="Core/target/release/libmacportscan_core.dylib"
    if [ -f "$lib_path" ]; then
        log_debug "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: $lib_path"
        if command -v nm &> /dev/null; then
            log_debug "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã:"
            nm -D "$lib_path" 2>/dev/null | head -10 | while read line; do
                log_debug "  $line"
            done
        fi
    else
        log_error "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
create_fixed_app() {
    log_header "=== –°–û–ó–î–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ==="
    
    local app_path="dist/MacPortScanner.app"
    local exec_path="$app_path/Contents/MacOS/MacPortScanner"
    
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    mkdir -p "$app_path/Contents/MacOS"
    mkdir -p "$app_path/Contents/Resources"
    
    # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª
    cat > "$exec_path" << 'EOF'
#!/bin/bash

# MacPortScanner Enhanced Launcher
# –£–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫–∞—Ç–µ–ª—å —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_FILE="$HOME/Library/Logs/MacPortScanner.log"
mkdir -p "$(dirname "$LOG_FILE")"

log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [MacPortScanner] $1" >> "$LOG_FILE"
    echo "$1"
}

log_message "=== MacPortScanner Starting ==="
log_message "Version: 1.0.0"
log_message "Architecture: $(uname -m)"
log_message "macOS Version: $(sw_vers -productVersion)"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
log_message "System check..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Rust –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
APP_DIR="$(dirname "$(dirname "$SCRIPT_DIR")")"
CORE_LIB="$APP_DIR/../Core/target/release/libmacportscan_core.dylib"

log_message "App directory: $APP_DIR"
log_message "Core library path: $CORE_LIB"

if [ -f "$CORE_LIB" ]; then
    log_message "‚úÖ Rust library found"
    log_message "Library size: $(ls -lh "$CORE_LIB" | awk '{print $5}')"
else
    log_message "‚ùå Rust library not found"
fi

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
log_message "Starting main functionality..."

echo "üöÄ MacPortScanner v1.0.0"
echo "========================="
echo ""
echo "‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞"
echo "‚úÖ Rust Core –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≥–æ—Ç–æ–≤–∞"
echo "‚ö†Ô∏è  SwiftUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
echo ""
echo "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:"
echo "  ‚Ä¢ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ (—á–µ—Ä–µ–∑ Rust Core)"
echo "  ‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤: $LOG_FILE"
echo "  ‚Ä¢ –°–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
echo ""
echo "üîß –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:"
echo "  ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ ./debug.sh –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
echo "  ‚Ä¢ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ $LOG_FILE"
echo ""

# –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Rust –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
if [ -f "$CORE_LIB" ]; then
    echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Rust –±–∏–±–ª–∏–æ—Ç–µ–∫–∏..."
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    echo "‚úÖ –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç"
else
    echo "‚ùå Rust –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
fi

log_message "MacPortScanner session completed"

# –î–µ—Ä–∂–∏–º –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã–º –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
echo ""
echo "–û–∫–Ω–æ –∑–∞–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥..."
sleep 10
EOF

    chmod +x "$exec_path"
    
    # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π Info.plist
    cat > "$app_path/Contents/Info.plist" << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundleExecutable</key>
    <string>MacPortScanner</string>
    <key>CFBundleIdentifier</key>
    <string>com.macportscanner.app</string>
    <key>CFBundleName</key>
    <string>MacPortScanner</string>
    <key>CFBundleDisplayName</key>
    <string>MacPortScanner</string>
    <key>CFBundleVersion</key>
    <string>1.0.0</string>
    <key>CFBundleShortVersionString</key>
    <string>1.0.0</string>
    <key>CFBundlePackageType</key>
    <string>APPL</string>
    <key>CFBundleSignature</key>
    <string>MPSC</string>
    <key>LSMinimumSystemVersion</key>
    <string>10.15</string>
    <key>NSHighResolutionCapable</key>
    <true/>
    <key>LSApplicationCategoryType</key>
    <string>public.app-category.developer-tools</string>
</dict>
</plist>
EOF
    
    log_success "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local command="${1:-full}"
    
    case $command in
        "system")
            init_logging
            system_diagnostics
            ;;
        "project")
            init_logging
            project_diagnostics
            ;;
        "app")
            init_logging
            app_diagnostics
            ;;
        "build")
            init_logging
            build_diagnostics
            ;;
        "test")
            init_logging
            test_execution
            ;;
        "fix")
            init_logging
            create_fixed_app
            ;;
        "full"|*)
            init_logging
            system_diagnostics
            echo ""
            project_diagnostics
            echo ""
            build_diagnostics
            echo ""
            app_diagnostics
            echo ""
            test_execution
            echo ""
            create_fixed_app
            echo ""
            log_header "=== –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ ==="
            test_execution
            ;;
    esac
    
    log_header "Debug session completed. Check logs/ directory for detailed logs."
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
show_help() {
    echo "MacPortScanner Debug System"
    echo "=========================="
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ö–û–ú–ê–ù–î–ê]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  full     - –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    echo "  system   - –°–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
    echo "  project  - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"
    echo "  build    - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–±–æ—Ä–∫–∏"
    echo "  app      - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    echo "  test     - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞"
    echo "  fix      - –°–æ–∑–¥–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
    echo "  help     - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0              # –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
    echo "  $0 system       # –¢–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
    echo "  $0 fix          # –°–æ–∑–¥–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ "$1" = "help" ] || [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    show_help
    exit 0
fi

# –ó–∞–ø—É—Å–∫
main "$@"